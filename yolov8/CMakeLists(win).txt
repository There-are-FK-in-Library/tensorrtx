cmake_minimum_required(VERSION 3.10)
 
project(yolov8)
 
add_definitions(-std=c++11)
add_definitions(-DAPI_EXPORTS)
if(MSVC)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif()
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_BUILD_TYPE Debug)
set(OpenCV_DIR "E:/Otherlib/opencv460/opencv/build")  
set(CMAKE_CUDA_COMPILER "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.3/bin/nvcc.exe")
set(CMAKE_CUDA_ARCHITECTURES 52 75 86)
enable_language(CUDA)
 
include_directories(${PROJECT_SOURCE_DIR}/include)
include_directories(${PROJECT_SOURCE_DIR}/plugin)
 
# include and link dirs of cuda and tensorrt, you need adapt them if yours different
if (CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64")
  message("embed_platform on")
  include_directories("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.3/include")
  link_directories("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.3/lib/x64")
else()
  message("embed_platform off")
  # cuda
  include_directories("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.3/include")
  link_directories("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.3/lib/x64")
  # tensorrt
  include_directories("E:/Otherlib/TensorRT-8.2.2.1/include")
  link_directories("E:/Otherlib/TensorRT-8.2.2.1/lib")
endif()
 
add_library(myplugins SHARED ${PROJECT_SOURCE_DIR}/plugin/yololayer.cu)
target_link_libraries(myplugins nvinfer cudart)
 
#opencv
# setup opencv
find_package(OpenCV QUIET
    NO_MODULE
    NO_DEFAULT_PATH
    NO_CMAKE_PATH
    NO_CMAKE_ENVIRONMENT_PATH
    NO_SYSTEM_ENVIRONMENT_PATH
    NO_CMAKE_PACKAGE_REGISTRY
    NO_CMAKE_BUILDS_PATH
    NO_CMAKE_SYSTEM_PATH
    NO_CMAKE_SYSTEM_PACKAGE_REGISTRY
)
 
message(STATUS "OpenCV library status:")
message(STATUS "    version: ${OpenCV_VERSION}")
message(STATUS "    libraries: ${OpenCV_LIBS}")
message(STATUS "    include path: ${OpenCV_INCLUDE_DIRS}")
 
include_directories(${OpenCV_INCLUDE_DIRS})
link_directories(${TRT_DIR}\\lib)
 
 
file(GLOB_RECURSE SRCS ${PROJECT_SOURCE_DIR}/src/*.cpp ${PROJECT_SOURCE_DIR}/src/*.cu)
add_executable(yolov8_det ${PROJECT_SOURCE_DIR}/yolov8_det.cpp ${SRCS})


target_link_libraries(yolov8_det nvinfer)
target_link_libraries(yolov8_det cudart)
target_link_libraries(yolov8_det myplugins)
target_link_libraries(yolov8_det ${OpenCV_LIBS})
 
add_executable(yolov8_seg ${PROJECT_SOURCE_DIR}/yolov8_seg.cpp ${SRCS})
target_link_libraries(yolov8_seg nvinfer cudart myplugins ${OpenCV_LIBS})

add_executable(yolov8_pose ${PROJECT_SOURCE_DIR}/yolov8_pose.cpp ${SRCS})
target_link_libraries(yolov8_pose nvinfer cudart myplugins ${OpenCV_LIBS})

add_executable(yolov8_cls ${PROJECT_SOURCE_DIR}/yolov8_cls.cpp ${SRCS})
target_link_libraries(yolov8_cls nvinfer cudart myplugins ${OpenCV_LIBS})

add_executable(yolov8_obb ${PROJECT_SOURCE_DIR}/yolov8_obb.cpp ${SRCS})
target_link_libraries(yolov8_obb nvinfer cudart myplugins ${OpenCV_LIBS})

target_compile_definitions(yolov8_det PRIVATE NOMINMAX)
target_compile_definitions(yolov8_seg PRIVATE NOMINMAX)
target_compile_definitions(yolov8_pose PRIVATE NOMINMAX)
target_compile_definitions(yolov8_cls PRIVATE NOMINMAX)
target_compile_definitions(yolov8_obb PRIVATE NOMINMAX)